---
import '@astrobook/types'
---

<style is:global>
  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation: none;
    mix-blend-mode: normal;
  }
</style>

<script is:inline>
  // @ts-check

  ;(() => {
    /** @typedef {'dark' | 'light'} Theme */

    const storageKey = 'astrobook-theme'

    /**
     * @returns {Theme}
     */
    function getSystemTheme() {
      return window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light'
    }

    /**
     * @returns {Theme | null}
     */
    function getUserTheme() {
      const theme = localStorage.getItem(storageKey)
      return theme === 'dark' || theme === 'light' ? theme : null
    }

    /**
     * @returns {Theme}
     */
    function getTheme() {
      return getUserTheme() || getSystemTheme()
    }

    /**
     * @param {Theme} theme
     */
    function setUserTheme(theme) {
      if (theme === getSystemTheme()) {
        localStorage.removeItem(storageKey)
      } else {
        localStorage.setItem(storageKey, theme)
      }
    }

    /**
     * @param {Theme} theme
     */
    function setStyle(theme) {
      const root = document.documentElement
      root.classList.toggle('dark', theme === 'dark')
      root.style.colorScheme = theme
    }

    /**
     * @param {Theme} theme
     */
    function setTheme(theme) {
      setUserTheme(theme)
      setStyle(theme)
    }

    // Set the theme on load
    setTheme(getTheme())

    if (!window.astrobook) {
      window.astrobook = {}
    }
    window.astrobook.setTheme = setTheme
    window.astrobook.getTheme = getTheme

    // Add message event listener to toggle the theme
    window.addEventListener('message', (event) => {
      try {
        const { type, theme } = event.data
        if (
          type === 'astrobook:set-theme' &&
          (theme === 'dark' || theme === 'light')
        ) {
          setTheme(theme)
        }
      } catch {
        // ignore
      }
    })
  })()
</script>
