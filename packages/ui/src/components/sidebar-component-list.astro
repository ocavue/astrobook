---
import '@astrobook/types'

import { getPathWithBase } from '@astrobook/core/client'
import BASE_URL from 'virtual:astrobook/base-url.mjs'
import modules from 'virtual:astrobook/story-modules.mjs'
import type { StoryModule } from '@astrobook/types'

interface Props {
  story?: string
}

// Helper function to create a tree structure from the modules
const createTree = (modules: StoryModule[]): Record<string, any> => {
  const tree: Record<string, any> = {}

  modules.forEach((module) => {
    const parts = module.directory.split('/')
    let current = tree

    parts.forEach((part, index) => {
      if (!current[part]) {
        current[part] = index === parts.length - 1 ? { __modules: [] } : {}
      }
      current = current[part]
    })
    if (!current.__modules) {
      current.__modules = []
    }
    current.__modules.push(module)
  })

  return tree
}

const tree = createTree(modules)
const currentPath = Astro.url.pathname

// Helper function to render the tree recursively as HTML string
const renderTree = (subtree: Record<string, any>, path = ''): string => {
  return Object.entries(subtree)
    .map(([key, value]) => {
      if (key === '__modules') {
        return value
          .map((module: StoryModule) => {
            // Encontrar el story con el id más largo que cumple la condición
            const longestStory = modules
              .flatMap((module) => module.stories)
              .filter((story) => currentPath.includes(story.id || ''))
              .reduce((longest, story) => {
                return story.id.length > (longest.id?.length || 0) ? story : longest
              }, {} as StoryModule)

            return `
              <li class="list-none">
                <div class=":uno: px-2 text-sm text-black dark:text-white cursor-pointer toggle " data-path="${module.name}">
                  <span class=" :uno: i-lucide-boxes inline-block size-4 text-gray-400 dark:text-gray-500"></span> <span>${module.name}</span>
                </div>
                <ul class="list-none pl-4">
                  ${module.stories
                    .map((story) => `
                      <li>
                        <a class="${story === longestStory ? ':uno: bg-gray-800 text-white hover:bg-gray-700 dark:bg-gray-200 dark:text-gray-900 dark:hover:bg-gray-200' : ':uno: text-gray-600 hover:bg-gray-200 hover:text-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-100'} :uno: block flex items-center gap-2 rounded text-sm no-underline transition :uno: py-1 pl-5 pr-2 astrobook-focus-ring"
                           href="${getPathWithBase(`/dashboard/${story.id}`, BASE_URL)}"
                           data-active="${Astro.props.story === story.id ? '' : undefined}">
                          <span class=":uno: i-lucide-diamond inline-block size-4 text-gray-400 dark:text-gray-500"></span>
                          <span>${story.name}</span>
                        </a>
                      </li>
                    `)
                    .join('')}
                </ul>
              </li>
            `
          })
          .join('')
      } else {
        const newPath = path ? `${path}/${key}` : key
        return `
          <li class=":uno: flex flex-col gap-0.5 list-none">
            <div class=":uno: px-2 text-sm text-black dark:text-white cursor-pointer toggle" data-path="${newPath}">
              <span class="i-lucide-folder-closed :uno: i-lucide-box inline-block size-4 text-gray-400 dark:text-gray-500"></span> <span>${key}</span>
            </div>
            <ul id="tree-${newPath}" class=":uno: flex flex-col gap-0.5 hidden teest first:pl-0 pl-4">
              ${renderTree(value, newPath)}
            </ul>
          </li>
        `
      }
    })
    .join('')
}

const treeHTML = renderTree(tree)
---

<style>
  ul {
    position: relative;

    li {
      position: relative;
      &::after {
        content: '';
        position: absolute;
        top: 0px;
        width: 1px;
        left: 0px;
        height: 100%;
        background-color: rgb(156 163 175);
      }
    }
  }
</style>
<div
  class=":uno: flex flex-col gap-4 overflow-y-auto border-0 px-2 pb-8 pt-4"
  id="astrobook-sidebar-component-list"
>
  <ul class="list-none p-0" set:html={treeHTML} />
</div>

<script is:inline>
  // @ts-check
  ;(() => {
    const elementId = 'astrobook-sidebar-component-list'
    const sessionKey = 'astrobook-navigation-scroll-position'

    /**
     * Saves the current scroll position of the navigation element to sessionStorage
     */
    const save = () => {
      const el = document.getElementById(elementId)
      if (!el) return

      sessionStorage.setItem(sessionKey, String(el.scrollTop))
    }

    /**
     * Creates a throttled version of a function
     * @param {() => void} func - The function to throttle
     * @param {number} limit - The time limit in milliseconds
     * @returns {() => void} - The throttled function
     */
    const throttle = (func, limit) => {
      /** @type {number | null} */
      let pending = null

      return () => {
        if (pending) return

        pending = 1
        setTimeout(() => {
          pending = null
          func()
        }, limit)
      }
    }

    const throttledSave = throttle(save, 100)

    const load = () => {
      const el = document.getElementById(elementId)
      if (!el) return

      const scrollPosition = sessionStorage.getItem(sessionKey) || ''
      if (scrollPosition.match(/^\d+(\.\d*)?$/)) {
        el.scrollTop = parseFloat(scrollPosition)
      }

      el.addEventListener('scroll', throttledSave)
    }

    load()

    document.addEventListener('astro:page-load', () => {
      load()
    })

    /**
     * Toggles the visibility of a directory's subtree
     * @param {string} directory - The directory to toggle
     */
    const toggleDirectory = (directory) => {
      const el = document.getElementById(`tree-${directory}`)
      if (el) {
        el.classList.toggle('hidden')
      }
    }

    document.querySelectorAll('.toggle').forEach((element) => {
      element.addEventListener('click', () => {
        if (element.nextElementSibling) {
          element.nextElementSibling.classList.toggle('hidden')
        }
      })
    })
  })()
</script>
