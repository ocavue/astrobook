---
import SidebarButton from './sidebar-button.astro'
---

<SidebarButton id="astrobook-theme-icon" title="Toggle theme">
  <span class=":uno: i-lucide-sun dark:i-lucide-moon block size-4"></span>
</SidebarButton>

<style is:global>
  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation: none;
    mix-blend-mode: normal;
    isolation: isolate;
  }
</style>

<script is:inline>
  // @ts-check

  ;(() => {
    /** @typedef {'dark' | 'light'} Theme */

    const iconElementId = 'astrobook-theme-icon'
    const sessionKey = 'astrobook-theme'

    /**
     * @returns {Theme}
     */
    function getSystemTheme() {
      return window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light'
    }

    /**
     * @returns {Theme | null}
     */
    function getUserTheme() {
      const theme = sessionStorage.getItem(sessionKey)
      return theme === 'dark' || theme === 'light' ? theme : null
    }

    /**
     * @returns {'dark' | 'light'}
     */
    function getTheme() {
      return getUserTheme() || getSystemTheme()
    }

    /**
     * @param {Theme} theme
     */
    function setUserTheme(theme) {
      if (theme === getSystemTheme()) {
        sessionStorage.removeItem(sessionKey)
      } else {
        sessionStorage.setItem(sessionKey, theme)
      }
    }

    /**
     * @param {Theme} theme
     */
    function setStyle(theme) {
      const root = document.documentElement
      root.classList.toggle('dark', theme === 'dark')
      root.style.colorScheme = theme
    }

    /**
     * @param {Theme} theme
     */
    function setTheme(theme) {
      setUserTheme(theme)
      setStyle(theme)
    }

    function toggleTheme() {
      setTheme(getTheme() === 'light' ? 'dark' : 'light')
    }

    const gradientOffset = 0.7
    const maskSvg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8 8"><defs><radialGradient id="toggle-theme-gradient"><stop offset="${gradientOffset}"/><stop offset="1" stop-opacity="0"/></radialGradient></defs><circle cx="4" cy="4" r="4" fill="url(#toggle-theme-gradient)"/></svg>`
    const maskUrl = `data:image/svg+xml;base64,${window.btoa(maskSvg)}`

    /**
     * @param {() => void} callback
     * @param {number} x
     * @param {number} y
     */
    async function startCircleAnimation(callback, x, y) {
      // @ts-expect-error: startViewTransition is not typed
      if (typeof document.startViewTransition !== 'function') {
        callback()
        return
      }

      // @ts-expect-error: startViewTransition is not typed
      await document.startViewTransition(() => {
        callback()
      }).ready

      const w = window.innerWidth
      const h = window.innerHeight

      const maxRadius = Math.ceil(
        Math.hypot(Math.max(x, w - x), Math.max(y, h - y)) / gradientOffset,
      )

      document.documentElement.animate(
        {
          maskImage: [`url('${maskUrl}')`, `url('${maskUrl}')`],
          maskRepeat: ['no-repeat', 'no-repeat'],
          maskPosition: [
            `${x}px ${y}px`,
            `${x - maxRadius}px ${y - maxRadius}px`,
          ],
          maskSize: ['0', `${2 * maxRadius}px`],
        },
        {
          duration: 500,
          easing: 'ease-in',
          pseudoElement: '::view-transition-new(root)',
        },
      )
    }

    /**
     * @param {MouseEvent} event
     */
    function handleClick(event) {
      startCircleAnimation(toggleTheme, event.clientX, event.clientY)
    }

    // Set the theme on load
    setTheme(getTheme())

    // Add event listener to toggle the theme
    document
      .getElementById(iconElementId)
      ?.addEventListener('click', handleClick)
  })()
</script>
